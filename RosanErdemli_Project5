;CMPE 314
;RoÅŸan Erdemli 
;Project 5

#lang plai-typed

;define msl
;Grammar of surface language
;; msl -> number
;; msl -> msl+msl
;; msl -> msl*msl
;; msl -> (msl)
;; Alphabet: [+, *, (), **, -, number]

;; msl is a typed defined as follows,
;; msl = <number>
;; msl = (add <msl> <msl>)
;;       (mult <msl> <msl>)
;;       (sub <msl> <msl>)
;;       (div <msl> <msl>)
;;       (exp <msl> <msl>)

(define-type msl
  [msl-num (n : number)]
  [msl-add (lhs : msl) (rhs : msl)]
  [msl-mult (lhs : msl) (rhs : msl)]
  [msl-sub (lhs : msl) (rhs : msl)]
  [msl-div (lhs : msl) (rhs : msl)]
  [msl-exp (lhs : msl) (rhs : msl)])

; Grammar for mslC
;; mslC -> number
;; mslC -> symbol
;;if-greater-than-zero -> <msl> <msl> <msl>
;;appC -> <msl> <msl>

(define-type mslC
  [mslC-num (n : number)]
  [mslC-id (s : symbol)]
  [if-greater-than-zero (pred : mslC)(trueState : mslC)(falseState : mslC)]
  [appC (fun : symbol) (arg : mslC)]
  [plusC (l : mslC) (r : mslC)]
  [multC (l : mslC) (r : mslC)])

;; exponentiation function
(define(** u t)
  (cond
    ((= u 1) t)
    (else
     (* t(**(sub1 u) t)))))

;;Test cases
(msl-num 7)
(msl-add (msl-num 3) (msl-num 4))
(msl-mult (msl-num 4) (msl-num 3))
(msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 30))
(msl-mult (msl-add (msl-num 3) (msl-num 4)) (msl-num 5))



;; CORE LANGUAGE
;;the core language
;; eval msl -> number
;; evaluate an msl expression

(define (eval [expr : msl])
  (type-case msl expr
    [msl-num (n) n]
    [msl-add (lhs rhs) (+ (eval lhs) (eval rhs))]    ;msl-add add function
    [msl-mult (lhs rhs) (* (eval lhs) (eval rhs))]   ;msl-mult mult function
    [msl-sub (lhs rhs) (- (eval lhs) (eval rhs))]    ;msl-sub sub function
    [msl-div (lhs rhs) (/ (eval lhs) (eval rhs))]  ;msl-div ))  ;msl-div div function
    [msl-exp (lhs rhs) (** (eval lhs) (eval rhs))])) ;msl-exp ))  ;msl-exp exp function


;;Test cases
(test (eval (msl-num 7))  7)
(test (eval (msl-num 5))  5)
(test (eval (msl-add (msl-num 3) (msl-num 4)))  7)
(test (eval (msl-add (msl-add (msl-num -3) (msl-num 4)) (msl-num 35)))  36)
(test (eval (msl-mult (msl-add (msl-num 3) (msl-num 12)) (msl-num 5)))  35)
(test (eval (msl-sub (msl-num 5) (msl-num 2)))  3)
(test (eval (msl-div (msl-num 8) (msl-num 1)))  8)
(test (eval (msl-add (msl-div (msl-num 20) (msl-num 5)) (msl-num 35)))  39)

;; parse s-expression -> msl
;; convert a quoted s expression into the equivalent msl form

(define (parse [s : s-expression]) : msl
  (cond
    [(s-exp-number? s) (msl-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (case (s-exp->symbol (first sl))
         [(+) (msl-add (parse (second sl)) (parse (third sl)))]
         [(*) (msl-mult (parse (second sl)) (parse (third sl)))]
         [(-) (msl-sub (parse (second sl)) (parse (third sl)))]
         [(/) (msl-div (parse (second sl)) (parse (third sl)))]
         [else (error 'parse "invalid list input")]))]
    [else (error 'parse "invalid input")]))

;;Test cases
(test (parse '7) (msl-num 7))
(test (parse '2) (msl-num 2))
(test (parse '(+ 3 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse '(+ (+ 3 4) 35)) (msl-add (msl-sub (msl-num 3) (msl-num 4)) (msl-num 35)))
(test (parse '(+ (- 3 4) 35)) (msl-add (msl-sub (msl-num 3) (msl-num 4)) (msl-num 35)))
(test (parse '(/ 20 4)) (msl-div (msl-num 20) (msl-num 4)))
(test (parse '(* 2 8)) (msl-mult (msl-num 2) (msl-num 8)))
(test (parse '(/ (* 3 4) 6)) (msl-div (msl-mult (msl-num 3) (msl-num 4)) (msl-num 6)))

;;-----------------------------------------------------------------------------------------------------------------------------------------------------

;; PARSER FOR PREFIX
;; parse s-expression -> msl
;; convert a quoted s expression into the equivalent msl form
(define (parse-prefix [s : s-expression]) : msl
  (cond
    [(s-exp-number? s) (msl-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (case (s-exp->symbol (first sl))
         [(+) (msl-add (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [(*) (msl-mult (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [(-) (msl-sub (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [(**) (msl-exp (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [else (error 'parse-prefix "invalid list input")]))]
    [else (error 'parse-prefix "invalid input")]))


(test (parse-prefix '7) (msl-num 7))
(test (parse-prefix '2) (msl-num 2))
(test (parse-prefix '(+ 3 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse-prefix '(- 20 4)) (msl-sub (msl-num 20) (msl-num 4)))
(test (parse-prefix '(* 2 8)) (msl-mult (msl-num 2) (msl-num 8)))
(test (parse-prefix '(+ (+ 3 4) 35)) (msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 35)))
(test (parse-prefix '(+ (- 3 1) 35)) (msl-add (msl-sub (msl-num 3) (msl-num 1)) (msl-num 35)))
(test (parse-prefix '(- (* 3 4) 6)) (msl-sub (msl-mult (msl-num 3) (msl-num 4)) (msl-num 6)))


;; PARSER FOR INFIX
;; parse s-expression -> msl
;; convert a quoted s expression into the equivalent msl form

(define (parse-infix [s : s-expression]) : msl
  (cond
    [(s-exp-number? s) (msl-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([s1 (s-exp->list s)])
       (case (s-exp->symbol (second s1))
         [(+) (msl-add (parse-infix (first s1)) (parse-infix (third s1)))]
         [(*) (msl-mult (parse-infix (first s1)) (parse-infix (third s1)))]
         [(-) (msl-sub (parse-infix (first s1)) (parse-infix (third s1)))]
         [(**) (msl-exp (parse-infix (first s1)) (parse-infix (third s1)))]
         [else (error 'parse-infix "invalid list input")]))]
    [else (error 'parse-infix "invalid input")]))

;;Tests
(test (parse-infix '2) (msl-num 2))
(test (parse-infix '((2 + 3) + (3 * 4))) (msl-add (msl-add (msl-num 2)(msl-num 3))(msl-mult (msl-num 3)(msl-num 4))))
(test (parse-infix '(2 - 5)) (msl-sub (msl-num 2) (msl-num 5)))
(test (parse-infix '(6 * 7)) (msl-mult (msl-num 6) (msl-num 7)))
(test (parse-infix '((5 + 5) - (3 + 4))) (msl-sub (msl-add (msl-num 5)(msl-num 5))(msl-add (msl-num 3)(msl-num 4))))
(test (parse-infix '6) (msl-num 6))
(test (parse-infix '(3 + 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse-infix '((6 * 7) + 35)) (msl-add (msl-mult (msl-num 6)(msl-num 7))(msl-num 35)))
(test (parse-infix '((1 - 2) * 5)) (msl-add (msl-sub (msl-num 1)(msl-num 2))(msl-num 5)))
(test (parse-infix '((2 ** 3) - 5)) (msl-sub (msl-exp (msl-num 2)(msl-num 3))(msl-num 5)))
(test (parse-infix '(2 ** 3)) (msl-exp (msl-num 2) (msl-num 3)))
(test (parse-infix '(3 + 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse-infix '(2 - (3 * 4))) (msl-sub (msl-num 2) (msl-mult (msl-num 3)(msl-num 4))))
(test (parse-infix '((3 + 4) - 5)) (msl-sub (msl-add (msl-num 3)(msl-num 4))(msl-num 5)))
(test (parse-infix '((10 - 9) ** (3 * 4))) (msl-exp (msl-sub (msl-num 10)(msl-num 9))(msl-mult (msl-num 3)(msl-num 4))))
(test (parse-infix '((1 + 1) * (5 * 6))) (msl-add (msl-add (msl-num 1)(msl-num 1))(msl-mult (msl-num 5)(msl-num 6))))
(test (parse-infix '((2 + 3) ** (3 * 4))) (msl-exp (msl-add (msl-num 2)(msl-num 3))(msl-mult (msl-num 3)(msl-num 4))))

;;output-reverse-polish msl -> list of s-expression
;;output the msl as the reverse polish commands needed to evaluate it
(define (output-reverse-polish [expr : msl])
  (type-case msl expr
    [msl-num (n) (list (number->s-exp n))]
    [msl-add (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '+)))]
    [msl-mult (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '*)))]
    [msl-sub (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '-)))]
    [msl-div (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '/)))]
    [msl-exp (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '**)))]))

(test (output-reverse-polish (msl-num 1)) (s-exp->list '(1)))
(test (output-reverse-polish (msl-num 2)) (s-exp->list '(2)))
(test (output-reverse-polish (msl-add (msl-num 3) (msl-num 4))) (s-exp->list '(3 4 +)))
(test (output-reverse-polish (msl-sub (msl-num 4) (msl-num 5))) (s-exp->list '(4 5 -)))
(test (output-reverse-polish (msl-num 3)) (s-exp->list '(3)))
(test (output-reverse-polish (msl-sub (msl-num 5) (msl-add (msl-num 6) (msl-num 7)))) (s-exp->list '(5 6 7 + -)))
(test (output-reverse-polish (msl-add (msl-num 10) (msl-add (msl-num 1) (msl-num 2)))) (s-exp->list '(10 1 2 + +)))
(test (output-reverse-polish (msl-num 4)) (s-exp->list '(4)))
(test (output-reverse-polish (msl-mult (msl-num 2) (msl-num 6))) (s-exp->list '(2 6 *)))
(test (output-reverse-polish (msl-mult (msl-num 10) (msl-num 2))) (s-exp->list '(10 2 *)))
(test (output-reverse-polish (msl-num 5)) (s-exp->list '(5)))
(test (output-reverse-polish (msl-add (msl-num 5) (msl-num 7))) (s-exp->list '(5 7 +)))
(test (output-reverse-polish (msl-add (msl-num 10) (msl-num 12))) (s-exp->list '(10 12 +)))
(test (output-reverse-polish (msl-add (msl-num 3) (msl-num 4))) (s-exp->list '(3 4 +)))
(test (output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9))) (s-exp->list '(3 4 * 9 +)))
(test (output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9))) (s-exp->list '(3 4 * 9 +)))
(test (output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9))) (s-exp->list '(3 4 * 9 +)))

"Example outputs"
(output-reverse-polish (msl-num 7))
(output-reverse-polish (msl-add (msl-num 3) (msl-num 4)))
(output-reverse-polish (msl-mult (msl-num 3) (msl-num 4)))
(output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9)))
(output-reverse-polish (msl-mult (msl-num 3) (msl-add (msl-num 4) (msl-num 9))))

"Parser -> reverse polish output" 
(output-reverse-polish (parse-prefix '(+ 99 (* 5 8))))
"Parser -> evaluation" 
(eval (parse-prefix '(+ 99 (* 5 8))))

;unparser-infix
;Contract 
;msl -> s-expression
;This function takes msl type object and unparses it into infix bracketed s-expression.

(define (unparser-infix [expr : msl])
  (type-case msl expr
    [msl-num (n) (list (number->s-exp n))]
      (msl-add (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '+))) (unparser-infix rhs)))
      (msl-mult (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '*))) (unparser-infix rhs)))
      (msl-sub (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '-))) (unparser-infix rhs)))
      (msl-div (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '/))) (unparser-infix rhs)))
      (msl-exp (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '**))) (unparser-infix rhs)))))

;test

(test (unparser-infix (msl-num 1)) (s-exp->list '(1)))
(test (unparser-infix (msl-num 2)) (s-exp->list '(2)))
(test (unparser-infix (msl-num 3)) (s-exp->list '(3)))
(test (unparser-infix (msl-num 4)) (s-exp->list '(4)))
(test (unparser-infix (msl-num 5)) (s-exp->list '(5)))
(test (unparser-infix (msl-add (msl-num 5) (msl-num 7))) (s-exp->list '(5 + 7)))
(test (unparser-infix (msl-add (msl-num 3) (msl-num 6))) (s-exp->list '(3 + 6)))
(test (unparser-infix (msl-add (msl-num 4) (msl-num 5))) (s-exp->list '(4 + 5)))

;unparser-prefix
;Contract 
;AE -> s-expression
;This function takes AE type object and unparses it into prefix bracketed s-expression.
(define (unparser-prefix [expr : msl])
  (type-case msl expr
    [msl-num (n) (list (number->s-exp n))]
    (msl-add (lhs rhs) (append (list(symbol->s-exp '+)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-mult (lhs rhs) (append (list(symbol->s-exp '*)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-sub (lhs rhs) (append (list(symbol->s-exp '-)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-div (lhs rhs) (append (list(symbol->s-exp '/)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-exp (lhs rhs) (append (list(symbol->s-exp '**)) (append (unparser-prefix lhs) (unparser-prefix rhs))))))

;test

(test (unparser-prefix (msl-num 1)) (s-exp->list '(1)))
(test (unparser-prefix (msl-num 2)) (s-exp->list '(2)))
(test (unparser-prefix (msl-num 3)) (s-exp->list '(3)))
(test (unparser-prefix (msl-num 4)) (s-exp->list '(4)))
(test (unparser-prefix (msl-num 5)) (s-exp->list '(5)))
(test (unparser-prefix (msl-add (msl-num 3) (msl-num 4))) (s-exp->list '(+ 3 4)))
(test (unparser-prefix (msl-add (msl-num 5) (msl-num 7))) (s-exp->list '(+ 5 7)))
(test (unparser-prefix (msl-add (msl-num 4) (msl-num 9))) (s-exp->list '(+ 4 9)))




; SUGAR LANGUAGE
;;the sugary language

(define-type sln
  [num-sln (n : number)]
  [plus-sln (l : sln) (r : sln)]
  [mult-sln (l : sln) (r : sln)]
  [bmin-sln (l : sln) (r : sln)] ;;can be expressed with plus and mult
  [umin-sln (r : sln)]                      ;;can be expressed with plus and mult
  [div-sln  (l : sln) (r : sln)])

;;Desugar method
;; sln -> msl
;; convert sugary syntax into core language
  
  (define (desugar [sugar : sln]) : msl
  (type-case sln sugar
    [num-sln (n) (msl-num n)]
    [plus-sln (l r) (msl-add
                      (desugar l)
                      (desugar r))]
    [mult-sln (l r) (msl-add
                      (desugar l)
                      (desugar r))]
    [bmin-sln (l r) (msl-add       ;;translates binary minus to addition of the neg of the second argument
                      (desugar l)
                      (msl-add
                       (msl-num -1)
                       (desugar r)))]
    [umin-sln (v) (desugar (bmin-sln (num-sln 0) v))] ;;unary minus translates to subtracting the argument from 0
    [div-sln (l r) (msl-div      ;;in the core language
                     (desugar l) 
                     (desugar r))]))

;;testing desugar
;; (sln-num 9) -> 9
;; (plus-sln (num-sln 8) umin-sln (num-sln 5))
;; (msl-add (msl-num 8) (msl-add (msl-num 0) (msl-mult (msl-num -1) (msl-num 5)
;; (div-sln (num-sln 4) (num-sln 2)
;; (msl-div (msl-num 4) (msl-num 2)

    
(test (desugar (num-sln 9)) (msl-num 9))
(test (desugar (plus-sln (num-sln 8) (umin-sln (num-sln 5))))
      (msl-add (msl-num 8) (msl-add (msl-num 0) (msl-add (msl-num -1) (msl-num 5)))))
(test (desugar (div-sln (num-sln 4) (num-sln 2)))
      (msl-div (msl-num 4) (msl-num 2)))

;;-----------------------------------------------------------------------------------------------------------------------------------------------------


;Project-5

;; expt : number number -> number
;; Purpose: To calculate exponentiation of given two number, first number base and second is power.
(define (expt (a : number) (b : number)) : number
  (cond
    ((= b 0) 1)
    ((even? b) (sqr (expt a (/ b 2))))
    (else (* a (expt a (- b 1))))))

;; sqr : number -> number
;; Purpose: To calculate square of given number.
(define (sqr (a : number)) : number
  (* a a))

;; Pair is a well-known data structure in Lisp/Scheme family languages,
;; - since we do not have a data structure in plai-type, 
;; - this is an basic implementation of it.
(define-type pair
  (sym-op (sym : symbol)(op : (number number -> number))))

;; A table for operations, 
;; - by changing just this data structure,
;; - you can add any binary operations.

;; A list of pair(sym-op) as table of operations.
;; Handycap of this is, 
;; - it is complety depending on host language's operations.
(define ops
  (list
   (sym-op '+ +)
   (sym-op '* *)
   ;; Several binary operations added as it seen below
   (sym-op '- -)
   (sym-op '/ /)
   (sym-op '^ expt)
   (sym-op 'custom (Î» (x y) (+ (* 2 x) y)))
   ))

;; get-op : symbol -> ((number number) -> number)
(define (get-op (sym : symbol)) : (number number -> number)
  (sym-op-op (assoc sym ops)))

;; assoc : symbol (listof pair) -> pair
(define (assoc (s : symbol) (lp : (listof pair))) : pair
  (let ((list-op (filter (lambda (x) (eq? s (sym-op-sym x))) lp)))
    (if (empty? list-op)
        (error 'assoc "Operation not defined")
        (first list-op))))


;; parseC : s-exp -> mslC

(define (parseC [s : s-expression]) : mslC
  (cond
    [(s-exp-number? s) (mslC-num (s-exp->number s))]
    [(s-exp-symbol? s) (mslC-id  (s-exp->symbol s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
          (cond
         [(= (length sl) 4)
          (if (symbol=? 'ifzero (s-exp->symbol (first sl)))
              (if-greater-than-zero (parseC (second sl))
                                    (parseC (third sl))
                                    (parseC (fourth sl)))
              (error 'parse "invalid expression as input"))]
         [(= (length sl) 3)
          (binaryOpC (s-exp->symbol (first sl)) 
                     (parseC (second sl)) (parseC (third sl)))]
         [(= (length sl) 2)
          (appC (s-exp->symbol (first sl)) (parseC (second sl)))]
         [else (error 'parse "invalid list input")])
       )]
    [else (error 'parse "invalid input")]))


;;test

(test (parseC (number->s-exp 5))(mslC-num 5))
(test (parseC (symbol->s-exp 'x))(mslC-id 'x))
(test (parseC '(ifzero 4 5 6))(if-greater-than-zero (mslC-num 4)(mslC-num 5)(mslC-num 6)))
(test (parseC '(ifzero 3 4 5))(if-greater-than-zero (mslC-num 3)(mslC-num 4)(mslC-num 5)))
(test (parseC '(ifzero 1 3 5))(if-greater-than-zero (mslC-num 1)(mslC-num 3)(mslC-num 5)))
(test (parseC '(ifzero 2 7 9))(if-greater-than-zero (mslC-num 2)(mslC-num 7)(mslC-num 9)))
(test (parseC '(ifzero 7 8 9))(if-greater-than-zero (mslC-num 7)(mslC-num 8)(mslC-num 9)))
(test (parseC '(ifzero 12 15 29))(if-greater-than-zero (mslC-num 12)(mslC-num 15)(mslC-num 29)))
(test (parseC '(ifzero (factorial n) 1 (* n (factorial (sub1 n)))))(if-greater-than-zero(appC 'factorial (mslC-id 'n))
      (mslC-num 1)(binaryOpC  '*(mslC-id 'n)(appC 'factorial (appC 'sub1 (mslC-id 'n))))))

;; Function Definition Structure

(define-type FunDefC
  [fdC (name : symbol) (arg : symbol) (body : mslC)])

; Example function definition namespace.

(define FuncDefNameSpace
  (list
   (fdC 'sqr 'x (parseC '(* x x)))
   (fdC 'sub1 'x (parseC '(+ x -1)))
   (fdC 'neg 'x (parseC '(* x -1)))
   (fdC 'double 'x (parseC '(+ x x)))
   (fdC 'quadruple 'x (parseC '(double (double x))))
   (fdC 'const5 '_ (parseC (number->s-exp 5)))
   (fdC 'factorial 'n (parseC 
                       '(ifzero n 1
                                (* n (factorial (sub1 n))))))
   (fdC 'fa 'x (parseC '(Î» (x y) (+ (* 2 y)))))))

;; get-fundef : symbol (listof FunDefC) -> FunDefC

(define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
  (cond
    [(empty? fds) (error 'get-fundef "reference to undefined function")]
    [(cons? fds) (cond
                   [(equal? n (fdC-name (first fds))) (first fds)]
                   [else (get-fundef n (rest fds))])]))

;; Tests:
(test (get-fundef 'sub1 FuncDefNameSpace) 
      (fdC 'sub1 'x (parseC '(+ x -1))))
(test (get-fundef 'neg FuncDefNameSpace) 
      (fdC 'neg 'x (parseC '(* x -1))))
(test (get-fundef 'sqr FuncDefNameSpace) 
      (fdC 'sqr 'x (parseC '(* x x))))
(test (get-fundef 'fa FuncDefNameSpace) 
      (fdC 'fa 'x (parseC '(Î» (x y) (+ (* 2 y))))))




;; subst : number symbol mslC -> mslC

(define (subst [what : number] [for : symbol] [in : mslC]) : mslC
  (type-case mslC in
    [mslC-num (n) in]
    [mslC-id (s) (cond
             [(symbol=? s for) (mslC-num what)] ;; What makes difference for eager evoluation in subst.
             [else in])]
    [appC (f a) (appC f (subst what for a))]
    [binaryOpC (op l r) (binaryOpC op
                                   (subst what for l)
                                   (subst what for r))]
    [if-greater-than-zero (p t f) (error 'sust "error")]))

;; Tests:
(test (subst 4 'x (mslC-num 5))(mslC-num 5))
(test (subst 4 'x (mslC-id 'y)) (mslC-id 'y))
(test (subst 4 'x (mslC-id 'x)) (mslC-num 4))
(test (subst 5 'x (mslC-id 'x)) (mslC-num 5))
(test (subst 9 'x (mslC-id 'y)) (mslC-id 'y))

;; interp : mslC (listof FunDefC) -> number
;; Purpose : To evaluate expressions to numbers.


(define (interp [e : mslC][fds : (listof FunDefC)]) : number
  (type-case mslC e
    [mslC-num (n) n]
    [mslC-id (_) (error 'interp "shouldn't get here")]
    [if-greater-than-zero (pred t f)
             (if (< 0 (interp pred fds))
                 (interp t fds)
                 (interp f fds))]
    [appC (f a) (local ([define fd (get-fundef f fds)])
                  (interp (subst 
                           (interp a fds) ;; Make it eager evaluation !!
                           (fdC-arg fd)
                           (fdC-body fd))
                          fds))]
    [binaryOpC (op l r)((get-op op)
                        (interp l fds)
                        (interp r fds))]
    ))

;test
(test (interp (parseC (number->s-exp 3)) empty) 3)
(test (interp (parseC '(+ 3 4)) empty) 7)
(test (interp (parseC '(* 3 4)) empty) 12)
(test (interp (if-greater-than-zero (mslC-num 1)(mslC-num 1)(mslC-num 1)) empty) 1)
(test (interp (if-greater-than-zero (mslC-num 2)(mslC-num 3)(mslC-num 4)) empty) 4)
(test (interp (if-greater-than-zero (mslC-num -4)(mslC-num 7)(mslC-num 9)) empty) 9)
(test (interp (if-greater-than-zero (mslC-num -6)(mslC-num 7)(mslC-num 8)) empty) 7)
(test (interp (if-greater-than-zero (mslC-num 3)(mslC-num 5)(mslC-num 6)) empty) 5)

;; eval : s-exp -> number
;; Purpose : A wrapper function to evaluate s-exp through our language.
(define (evalC (sexp : s-expression)) : number
  ;(interp (parse sexp) empty))
(interp (parseC sexp) FuncDefNameSpace))

(test (evalC '(+ 3 46)) 50)
(test (evalC '(* 3 4)) 12)
(test (evalC '(sqr 4)) 16)
(test (evalC '(sqr 4)) 17)
(test (evalC '(neg 4)) -4)

;;-----------------------------------------------------------------------------------------------------------------------------------------------------

;; Î»-expression grammar
;; Î»-exp -> v
;; Î»-exp -> (Î»-exp Î»-exp)
;; Î»-exp -> (Î» v Î»-exp)
;; where v is a symbol.

(define-type Î»-exp
  (Î»-sym (v : symbol))
  (Î»-app (l : Î»-exp)(r : Î»-exp))
  (Î»-def (v : symbol)(p : Î»-exp))
  )


;; Tests:
(Î»-sym 'x)
(Î»-app (Î»-sym 'x)(Î»-sym 'y))
(Î»-def 'v (Î»-app (Î»-sym 'x)(Î»-sym 'y)))


;; parse : s-exp -> Î»-exp
(define (parseÎ» (sexp : s-expression)) : Î»-exp
  (cond
    [(s-exp-symbol? sexp)(Î»-sym (s-exp->symbol sexp))]
    [(s-exp-list? sexp)
     (let ([sexp-list (s-exp->list sexp)])
       (cond
         [(= 2 (length sexp-list))
          (Î»-app (parseÎ» (first sexp-list))(parseÎ» (second sexp-list)))]
         [(= 3 (length sexp-list))
          (if (and (symbol=? 'Î» (s-exp->symbol (first sexp-list)))
                   (s-exp-symbol? (second sexp-list)))
              (Î»-def (s-exp->symbol(second sexp-list))
                     (parseÎ» (third sexp-list)))
              (error 'parseÎ» "Not valid Î»-definition")
              )]
         [else (error 'parseÎ» "Not valid length Î»-exp")]
         ))]
    [else (error 'parseÎ» "Not valid Î»-exp")]
    ))


;; A set represented as a list.
;; set-union : (listof symbol) (listof symbol) -> (listof symbol)


(define (set-union (s1 : (listof symbol)) (s2 : (listof symbol))) : (listof symbol)
  (foldr (lambda (x y)
           (if (member x y)
               y
               (cons x y))) 
         empty
         (append s1 s2)))

;; Tests:
(test (set-union empty empty) empty)
(test (set-union empty (list 'x)) (list 'x))
(test (set-union (list 'x)(list 'x 'y)) (list 'x 'y))
(test (set-union (list 'x) (list 'x)) (list 'x))

;; set-difference : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the set difference of two sets.
(define (set-difference (s1 : (listof symbol))  (s2 : (listof symbol))) : (listof symbol)
  (filter (lambda (x)
            (not (member x s2)))
          s1))

;; Tests:
(test (set-difference empty (list 'x)) empty)
(test (set-difference (list 'x) empty) (list 'x))
(test (set-difference (list 'x)(list 'x 'y)) empty)
(test (set-difference (list 'x 'y)(list 'x))(list 'y))

;; free-identifier : Î»-exp -> (listof symbol)
;; Purpose : To find free identifiers in given Î» expression.
(define (free-identifier (le : Î»-exp)) : (listof symbol)
  (type-case Î»-exp le
    (Î»-sym (v) (list v))
    (Î»-app (l r)(set-union 
                 (free-identifier l)
                 (free-identifier r)))
    (Î»-def (v p)(set-difference (free-identifier p)
                                (list v)))
    ))

;; Tests:
(test (free-identifier (parseÎ» (symbol->s-exp 'x))) (list 'x))
(test (free-identifier (parseÎ» '(Î» x x))) empty)
(test (free-identifier (parseÎ» '(Î» x y))) (list 'y))
(test (free-identifier (parseÎ» '((Î» x y)(Î» y z)))) (list 'y 'z))
(test (free-identifier (parseÎ» '((Î» f y)(Î» z z)))) (list 'y))
(test (free-identifier (parseÎ» '(Î» x (Î» y (y x))))) empty)
(test (free-identifier (parseÎ» '(Î» x (Î» y z)))) (list 'z))
