;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname Rosan_Erdemli_Project_6) (read-case-sensitive #t) (teachpacks ((lib "image.ss" "teachpack" "2htdp") (lib "universe.ss" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.ss" "teachpack" "2htdp") (lib "universe.ss" "teachpack" "2htdp")))))
;;RoÅŸan Erdemli
;;Project-6

#lang plai-typed

;define msl
;Grammar of surface language
;; msl -> number
;; msl -> msl+msl
;; msl -> msl*msl
;; msl -> (msl)
;; Alphabet: [+, *, (), **, -, number]

;; msl is a typed defined as follows,
;; msl = <number>
;; msl = (add <msl> <msl>)
;;       (mult <msl> <msl>)
;;       (sub <msl> <msl>)
;;       (div <msl> <msl>)
;;       (exp <msl> <msl>)

(define-type msl
  [msl-num (n : number)]
  [msl-add (lhs : msl) (rhs : msl)]
  [msl-mult (lhs : msl) (rhs : msl)]
  [msl-sub (lhs : msl) (rhs : msl)]
  [msl-div (lhs : msl) (rhs : msl)]
  [msl-exp (lhs : msl) (rhs : msl)])

; Grammar for mslC
;; mslC -> number
;; mslC -> symbol
;;if-greater-than-zero -> <msl> <msl> <msl>
;;appC -> <msl> <msl>

(define-type mslC
  [mslC-num (n : number)]
  [mslC-id (s : symbol)]
  [if-greater-than-zero (pred : mslC)(trueState : mslC)(falseState : mslC)]
  [appC (fun : symbol) (arg : mslC)]
  [binaryOpC (op : symbol) (l : mslC) (r : mslC)])

;; exponentiation function
(define(** u t)
  (cond
    ((= u 1) t)
    (else
     (* t(**(sub1 u) t)))))

;;Tests
(msl-num 7)
(msl-add (msl-num 3) (msl-num 4))
(msl-mult (msl-num 4) (msl-num 3))
(msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 30))
(msl-mult (msl-add (msl-num 3) (msl-num 4)) (msl-num 5))


;;-----------------------------------------------------------------------------------------------------------------------------------------------------

;; CORE LANGUAGE
;;the core language
;; eval msl -> number
;; evaluate an msl expression

(define (eval [expr : msl])
  (type-case msl expr
    [msl-num (n) n]
    [msl-add (lhs rhs) (+ (eval lhs) (eval rhs))]    ;msl-add add function
    [msl-mult (lhs rhs) (* (eval lhs) (eval rhs))]   ;msl-mult mult function
    [msl-sub (lhs rhs) (- (eval lhs) (eval rhs))]    ;msl-sub sub function
    [msl-div (lhs rhs) (/ (eval lhs) (eval rhs))]  ;msl-div ))  ;msl-div div function
    [msl-exp (lhs rhs) (** (eval lhs) (eval rhs))])) ;msl-exp ))  ;msl-exp exp function




(test (eval (msl-num 7))  7)
(test (eval (msl-num 5))  5)
(test (eval (msl-add (msl-num 3) (msl-num 4)))  7)
(test (eval (msl-sub (msl-num 5) (msl-num 2)))  3)
(test (eval (msl-div (msl-num 8) (msl-num 1)))  8)
(test (eval (msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 35)))  42)
(test (eval (msl-mult (msl-add (msl-num 3) (msl-num 4)) (msl-num 5)))  35)
(test (eval (msl-add (msl-div (msl-num 20) (msl-num 5)) (msl-num 35)))  39)

;; parse s-expression -> msl
;; convert a quoted s expression into the equivalent msl form

(define (parse [s : s-expression]) : msl
  (cond
    [(s-exp-number? s) (msl-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (case (s-exp->symbol (first sl))
         [(+) (msl-add (parse (second sl)) (parse (third sl)))]
         [(*) (msl-mult (parse (second sl)) (parse (third sl)))]
         [(-) (msl-sub (parse (second sl)) (parse (third sl)))]
         [(/) (msl-div (parse (second sl)) (parse (third sl)))]
         [else (error 'parse "invalid list input")]))]
    [else (error 'parse "invalid input")]))



(test (parse '7) (msl-num 7))
(test (parse '2) (msl-num 2))
(test (parse '(+ 3 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse '(/ 20 4)) (msl-div (msl-num 20) (msl-num 4)))
(test (parse '(* 2 8)) (msl-mult (msl-num 2) (msl-num 8)))
(test (parse '(+ (+ 3 4) 35)) (msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 35)))
(test (parse '(+ (- 3 4) 35)) (msl-add (msl-sub (msl-num 3) (msl-num 4)) (msl-num 35)))
(test (parse '(/ (* 3 4) 6)) (msl-div (msl-mult (msl-num 3) (msl-num 4)) (msl-num 6)))

;;-----------------------------------------------------------------------------------------------------------------------------------------------------

;; PARSER FOR PREFIX
;; parse s-expression -> msl
;; convert a quoted s expression into the equivalent msl form
;; examples
;; '7 -> (msl-num 7)
;; '(+ 3 4) -> (msl-add (msl-num 3) (msl-num 4))
;; '(+ (+ 3 4) 35) -> (msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 35))

(define (parse-prefix [s : s-expression]) : msl
  (cond
    [(s-exp-number? s) (msl-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (case (s-exp->symbol (first sl))
         [(+) (msl-add (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [(*) (msl-mult (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [(-) (msl-sub (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [(**) (msl-exp (parse-prefix (second sl)) (parse-prefix (third sl)))]
         [else (error 'parse-prefix "invalid list input")]))]
    [else (error 'parse-prefix "invalid input")]))


(test (parse-prefix '7) (msl-num 7))
(test (parse-prefix '2) (msl-num 2))
(test (parse-prefix '(+ 3 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse-prefix '(- 20 4)) (msl-sub (msl-num 20) (msl-num 4)))
(test (parse-prefix '(* 2 8)) (msl-mult (msl-num 2) (msl-num 8)))
(test (parse-prefix '(+ (+ 3 4) 35)) (msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 35)))
(test (parse-prefix '(+ (- 3 1) 35)) (msl-add (msl-sub (msl-num 3) (msl-num 1)) (msl-num 35)))
(test (parse-prefix '(- (* 3 4) 6)) (msl-sub (msl-mult (msl-num 3) (msl-num 4)) (msl-num 6)))


;; PARSER FOR INFIX
;; parse s-expression -> msl
;; convert a quoted s expression into the equivalent msl form
;; examples
;; '7 -> (msl-num 7)
;; '(3 + 4) -> (msl-add (msl-num 3) (msl-num 4))
;; '(2 + 3) -> (msl-add (msl-num 2) (msl-num 3))
;; '(2 - (3 * 4)) (msl-sub (msl-num 2)(msl-mult (msl-num 3)(msl-num 4))))
;; '((3 + 4) + 35) -> (msl-add (msl-add (msl-num 3) (msl-num 4)) (msl-num 35))
;; '((2 + 3) ** (3 * 4))) (msl-exp (msl-add (msl-num 2)(msl-num 3))(msl-mult (msl-num 3)(msl-num 4))))

(define (parse-infix [s : s-expression]) : msl
  (cond
    [(s-exp-number? s) (msl-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([s1 (s-exp->list s)])
       (case (s-exp->symbol (second s1))
         [(+) (msl-add (parse-infix (first s1)) (parse-infix (third s1)))]
         [(*) (msl-mult (parse-infix (first s1)) (parse-infix (third s1)))]
         [(-) (msl-sub (parse-infix (first s1)) (parse-infix (third s1)))]
         [(**) (msl-exp (parse-infix (first s1)) (parse-infix (third s1)))]
         [else (error 'parse-infix "invalid list input")]))]
    [else (error 'parse-infix "invalid input")]))

;;Tests
(test (parse-infix '2) (msl-num 2))
(test (parse-infix '5) (msl-num 5))
(test (parse-infix '6) (msl-num 6))
(test (parse-infix '7) (msl-num 7))
(test (parse-infix '8) (msl-num 8))
(test (parse-infix '(3 + 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse-infix '(2 - 5)) (msl-sub (msl-num 2) (msl-num 5)))
(test (parse-infix '(6 * 7)) (msl-mult (msl-num 6) (msl-num 7)))
(test (parse-infix '(2 ** 3)) (msl-exp (msl-num 2) (msl-num 3)))
(test (parse-infix '(3 + 4)) (msl-add (msl-num 3) (msl-num 4)))
(test (parse-infix '(2 - (3 * 4))) (msl-sub (msl-num 2) (msl-mult (msl-num 3)(msl-num 4))))
(test (parse-infix '((6 * 7) + 35)) (msl-add (msl-mult (msl-num 6)(msl-num 7))(msl-num 35)))
(test (parse-infix '((1 - 2) * 5)) (msl-mult (msl-sub (msl-num 1)(msl-num 2))(msl-num 5)))
(test (parse-infix '((2 ** 3) - 5)) (msl-sub (msl-exp (msl-num 2)(msl-num 3))(msl-num 5)))
(test (parse-infix '((3 + 4) - 5)) (msl-sub (msl-add (msl-num 3)(msl-num 4))(msl-num 5)))
(test (parse-infix '((10 - 9) ** (3 * 4))) (msl-exp (msl-sub (msl-num 10)(msl-num 9))(msl-mult (msl-num 3)(msl-num 4))))
(test (parse-infix '((2 + 3) + (3 * 4))) (msl-add (msl-add (msl-num 2)(msl-num 3))(msl-mult (msl-num 3)(msl-num 4))))
(test (parse-infix '((5 + 5) - (3 + 4))) (msl-sub (msl-add (msl-num 5)(msl-num 5))(msl-add (msl-num 3)(msl-num 4))))
(test (parse-infix '((1 + 1) * (5 * 6))) (msl-mult (msl-add (msl-num 1)(msl-num 1))(msl-mult (msl-num 5)(msl-num 6))))
(test (parse-infix '((2 + 3) ** (3 * 4))) (msl-exp (msl-add (msl-num 2)(msl-num 3))(msl-mult (msl-num 3)(msl-num 4))))

;;output-reverse-polish msl -> list of s-expression
;;output the msl as the reverse polish commands needed to evaluate it
;; template
;;(define (output-reverse-polish [expr : msl])
;; (type-case msl expr
;; [msl-num (n) ..]
;; [msl-add (lhs rhs)(... (output-reverse-polish lhs)(output-reverse-polish rhs))...]
;; [msl-mult (lhs rhs)(... (output-reverse-polish lhs)(output-reverse-polish rhs))...]
;; [msl-sub (lhs rhs)(... (output-reverse-polish lhs)(output-reverse-polish rhs))...]
;; [msl-exp (lhs rhs)(... (output-reverse-polish lhs)(output-reverse-polish rhs))...]


(define (output-reverse-polish [expr : msl])
  (type-case msl expr
    [msl-num (n) (list (number->s-exp n))]
    [msl-add (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '+)))]
    [msl-mult (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '*)))]
    [msl-sub (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '-)))]
    [msl-div (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '/)))]
    [msl-exp (lhs rhs) (append (append (output-reverse-polish lhs) (output-reverse-polish rhs)) (list (symbol->s-exp '**)))]))

(test (output-reverse-polish (msl-num 1)) (s-exp->list '(1)))
(test (output-reverse-polish (msl-num 2)) (s-exp->list '(2)))
(test (output-reverse-polish (msl-num 3)) (s-exp->list '(3)))
(test (output-reverse-polish (msl-num 4)) (s-exp->list '(4)))
(test (output-reverse-polish (msl-num 5)) (s-exp->list '(5)))
(test (output-reverse-polish (msl-add (msl-num 5) (msl-num 7))) (s-exp->list '(5 7 +)))
(test (output-reverse-polish (msl-add (msl-num 10) (msl-num 12))) (s-exp->list '(10 12 +)))
(test (output-reverse-polish (msl-add (msl-num 3) (msl-num 4))) (s-exp->list '(3 4 +)))
(test (output-reverse-polish (msl-sub (msl-num 4) (msl-num 5))) (s-exp->list '(4 5 -)))
(test (output-reverse-polish (msl-mult (msl-num 2) (msl-num 6))) (s-exp->list '(2 6 *)))
(test (output-reverse-polish (msl-mult (msl-num 10) (msl-num 2))) (s-exp->list '(10 2 *)))
(test (output-reverse-polish (msl-add (msl-num 3) (msl-num 4))) (s-exp->list '(3 4 +)))
(test (output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9))) (s-exp->list '(3 4 * 9 +)))
(test (output-reverse-polish (msl-sub (msl-num 5) (msl-add (msl-num 6) (msl-num 7)))) (s-exp->list '(5 6 7 + -)))
(test (output-reverse-polish (msl-add (msl-num 10) (msl-add (msl-num 1) (msl-num 2)))) (s-exp->list '(10 1 2 + +)))
(test (output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9))) (s-exp->list '(3 4 * 9 +)))
(test (output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9))) (s-exp->list '(3 4 * 9 +)))

"Example outputs"
(output-reverse-polish (msl-num 7))
(output-reverse-polish (msl-add (msl-num 3) (msl-num 4)))
(output-reverse-polish (msl-mult (msl-num 3) (msl-num 4)))
(output-reverse-polish (msl-add (msl-mult (msl-num 3) (msl-num 4)) (msl-num 9)))
(output-reverse-polish (msl-mult (msl-num 3) (msl-add (msl-num 4) (msl-num 9))))

"Parser -> reverse polish output" 
(output-reverse-polish (parse-prefix '(+ 99 (* 5 8))))
"Parser -> evaluation" 
(eval (parse-prefix '(+ 99 (* 5 8))))

;unparser-infix
;Contract 
;msl -> s-expression
;This function takes msl type object and unparses it into infix bracketed s-expression.
(define (unparser-infix [expr : msl])
  (type-case msl expr
    [msl-num (n) (list (number->s-exp n))]
      (msl-add (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '+))) (unparser-infix rhs)))
      (msl-mult (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '*))) (unparser-infix rhs)))
      (msl-sub (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '-))) (unparser-infix rhs)))
      (msl-div (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '/))) (unparser-infix rhs)))
      (msl-exp (lhs rhs) (append (append (unparser-infix lhs) (list (symbol->s-exp '**))) (unparser-infix rhs)))))

;test

(test (unparser-infix (msl-num 1)) (s-exp->list '(1)))
(test (unparser-infix (msl-num 2)) (s-exp->list '(2)))
(test (unparser-infix (msl-num 3)) (s-exp->list '(3)))
(test (unparser-infix (msl-num 4)) (s-exp->list '(4)))
(test (unparser-infix (msl-num 5)) (s-exp->list '(5)))
(test (unparser-infix (msl-add (msl-num 5) (msl-num 7))) (s-exp->list '(5 + 7)))
(test (unparser-infix (msl-add (msl-num 3) (msl-num 6))) (s-exp->list '(3 + 6)))
(test (unparser-infix (msl-add (msl-num 4) (msl-num 5))) (s-exp->list '(4 + 5)))

;unparser-prefix
;Contract 
;AE -> s-expression
;This function takes AE type object and unparses it into prefix bracketed s-expression.
(define (unparser-prefix [expr : msl])
  (type-case msl expr
    [msl-num (n) (list (number->s-exp n))]
    (msl-add (lhs rhs) (append (list(symbol->s-exp '+)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-mult (lhs rhs) (append (list(symbol->s-exp '*)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-sub (lhs rhs) (append (list(symbol->s-exp '-)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-div (lhs rhs) (append (list(symbol->s-exp '/)) (append (unparser-prefix lhs) (unparser-prefix rhs))))
    (msl-exp (lhs rhs) (append (list(symbol->s-exp '**)) (append (unparser-prefix lhs) (unparser-prefix rhs))))))

;test

(test (unparser-prefix (msl-num 1)) (s-exp->list '(1)))
(test (unparser-prefix (msl-num 2)) (s-exp->list '(2)))
(test (unparser-prefix (msl-num 3)) (s-exp->list '(3)))
(test (unparser-prefix (msl-num 4)) (s-exp->list '(4)))
(test (unparser-prefix (msl-num 5)) (s-exp->list '(5)))
(test (unparser-prefix (msl-add (msl-num 3) (msl-num 4))) (s-exp->list '(+ 3 4)))
(test (unparser-prefix (msl-add (msl-num 5) (msl-num 7))) (s-exp->list '(+ 5 7)))
(test (unparser-prefix (msl-add (msl-num 4) (msl-num 9))) (s-exp->list '(+ 4 9)))


;;-----------------------------------------------------------------------------------------------------------------------------------------------------

; SUGAR LANGUAGE
;;the sugary language

(define-type msls
  [num-msls (n : number)]
  [plus-msls (l : msls) (r : msls)]
  [mult-msls (l : msls) (r : msls)]
  [bmin-msls (l : msls) (r : msls)] ;;can be expressed with plus and mult
  [umin-msls (r : msls)]                      ;;can be expressed with plus and mult
  [div-msls  (l : msls) (r : msls)])

;;Desugar method
;; msls -> msl
;; convert sugary syntax into core language
  
  (define (desugar [sugar : msls]) : msl
  (type-case msls sugar
    [num-msls (n) (msl-num n)]
    [plus-msls (l r) (msl-add
                      (desugar l)
                      (desugar r))]
    [mult-msls (l r) (msl-add
                      (desugar l)
                      (desugar r))]
    [bmin-msls (l r) (msl-add       ;;translates binary minus to addition of the neg of the second argument
                      (desugar l)
                      (msl-add
                       (msl-num -1)
                       (desugar r)))]
    [umin-msls (v) (desugar (bmin-msls (num-msls 0) v))] ;;unary minus translates to subtracting the argument from 0
    [div-msls (l r) (msl-div      ;;in the core language
                     (desugar l) 
                     (desugar r))]))

;;testing desugar
;; (msls-num 9) -> 9
;; (plus-msls (num-msls 8) umin-msls (num-msls 5))
;; (msl-add (msl-num 8) (msl-add (msl-num 0) (msl-mult (msl-num -1) (msl-num 5)
;; (div-msls (num-msls 4) (num-msls 2)
;; (msl-div (msl-num 4) (msl-num 2)

    
(test (desugar (num-msls 9)) (msl-num 9))
(test (desugar (plus-msls (num-msls 8) (umin-msls (num-msls 5))))
      (msl-add (msl-num 8) (msl-add (msl-num 0) (msl-add (msl-num -1) (msl-num 5)))))
(test (desugar (div-msls (num-msls 4) (num-msls 2)))
      (msl-div (msl-num 4) (msl-num 2)))


;---------------------------------------------------------------------------------------------------------------------------------------------------

; Î»-expression grammar
; Î»-exp -> v
; Î»-exp -> (Î»-exp Î»-exp)
; Î»-exp -> (Î» v Î»-exp)
; where v is a symbol.
; Î»-exp is an abstract syntax grammar or a parse tree definition for
; - Î»-exp that defined above.

(define-type Î»-exp
  (Î»-sym (v : symbol))
  (Î»-app (l : Î»-exp)(r : Î»-exp))
  (Î»-def (v : symbol)(p : Î»-exp))
  )
;; Tests:
(Î»-sym 'x)
(Î»-app (Î»-sym 'x)(Î»-sym 'y))
(Î»-def 'v (Î»-app (Î»-sym 'x)(Î»-sym 'y)))

;; parse : s-exp -> Î»-exp
;; Purpose : To transform given s-expression to corresponding
(define (parseÎ» (sexp : s-expression)) : Î»-exp
  (cond
    [(s-exp-symbol? sexp)(Î»-sym (s-exp->symbol sexp))]
    [(s-exp-list? sexp)
     (let ([sexp-list (s-exp->list sexp)])
       (cond
         [(= 2 (length sexp-list))
          (Î»-app (parseÎ» (first sexp-list))(parseÎ» (second sexp-list)))]
         [(= 3 (length sexp-list))
          (if (and (symbol=? 'Î» (s-exp->symbol (first sexp-list)))
                   (s-exp-symbol? (second sexp-list)))
              (Î»-def (s-exp->symbol(second sexp-list))
                     (parseÎ» (third sexp-list)))
              (error 'parseÎ» "Not valid Î»-definition")
              )]
         [else (error 'parseÎ» "Not valid length Î»-exp")]
         ))]
    [else (error 'parseÎ» "Not valid Î»-exp")]
    ))


;; A set represented as a list.
;; set-union : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the union of two sets.
(define (set-union (s1 : (listof symbol)) (s2 : (listof symbol))) : (listof symbol)
  (foldr (lambda (x y)
           (if (member x y)
               y
               (cons x y))) 
         empty
         (append s1 s2)))

;; Tests:
(test (set-union empty empty) empty)
(test (set-union empty (list 'x)) (list 'x))
(test (set-union (list 'x)(list 'x 'y)) (list 'x 'y))
(test (set-union (list 'x) (list 'x)) (list 'x))

;; set-difference : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the set difference of two sets.
(define (set-difference (s1 : (listof symbol))  (s2 : (listof symbol))) : (listof symbol)
  (filter (lambda (x)
            (not (member x s2)))
          s1))

;; Tests:
(test (set-difference empty (list 'x)) empty)
(test (set-difference (list 'x) empty) (list 'x))
(test (set-difference (list 'x)(list 'x 'y)) empty)
(test (set-difference (list 'x 'y)(list 'x))(list 'y))

;; free-identifier : Î»-exp -> (listof symbol)
;M = x â‡’ FI(M) = {x} (1)
;M = (M1 M2) â‡’ FI(M) = FI(M1) âˆª FI(M2) (2)
;M = (Î» x M1) â‡’ FI(M) = FI(M1) - {x} (3)
;; Purpose : To find free identifiers in given Î» expression.
(define (free-identifier (le : Î»-exp)) : (listof symbol)
  (type-case Î»-exp le
    (Î»-sym (v) (list v))
    (Î»-app (l r)(set-union 
                 (free-identifier l)
                 (free-identifier r)))
    (Î»-def (v p)(set-difference (free-identifier p)
                                (list v)))
    ))

;; Tests:
(test (free-identifier (parseÎ» (symbol->s-exp 'x))) (list 'x))
(test (free-identifier (parseÎ» '(Î» x x))) empty)
(test (free-identifier (parseÎ» '(Î» x y))) (list 'y))
(test (free-identifier (parseÎ» '((Î» x y)(Î» y z)))) (list 'y 'z))
(test (free-identifier (parseÎ» '((Î» f y)(Î» z z)))) (list 'y))
(test (free-identifier (parseÎ» '(Î» x (Î» y (y x))))) empty)
(test (free-identifier (parseÎ» '(Î» x (Î» y z)))) (list 'z))

;; change-identifier : symbol symbol Î»-exp -> Î»-exp
;; Purpose: A helper function for alpha transformer,
;; - makes symbolic computation for changing given symbol in given Î»-expression.
(define (change-identifier (what : symbol) (for : symbol) (in : Î»-exp)) : Î»-exp
  (type-case Î»-exp in
    (Î»-sym (v) (if (symbol=? v for) (Î»-sym what) in))
    (Î»-app (l r) (Î»-app (change-identifier what for l)
                        (change-identifier what for r)))
    (Î»-def (v p) (Î»-def (if (symbol=? v for) what v)
                        (change-identifier what for p)))
    )
  )

;; Tests:
(test (change-identifier 'x 'v (parseÎ» '(Î» v v)))(parseÎ» '(Î» x x)))
(test (change-identifier 's 'y (Î»-sym 'x)) (Î»-sym 'x))
(test (change-identifier 's 'x (parseÎ» '(Î» x x))) (parseÎ» '(Î» s s)))
(test (change-identifier 's 'x (parseÎ» '((Î» x x)(Î» x x)))) 
      (parseÎ» '((Î» s s)(Î» s s))))

;; bounded-identifier : Î»-exp -> (listof symbol)
;; Purpose : To find bounded identifiers in given Î» expression.
(define (bounded-identifier (le : Î»-exp)) : (listof symbol)
  (type-case Î»-exp le
    (Î»-sym (v) empty)
    (Î»-app (l r)(set-union 
                 (bounded-identifier l)
                 (bounded-identifier r)))
    (Î»-def (v p)(set-union (bounded-identifier p)
                           (list v)))
    ))

;; Tests:
(test (bounded-identifier (parseÎ» (symbol->s-exp 'x))) empty)
(test (bounded-identifier (parseÎ» '(Î» x x))) (list 'x))
(test (bounded-identifier (parseÎ» '(Î» x y))) (list 'x))
(test (bounded-identifier (parseÎ» '((Î» x y)(Î» y z)))) (list 'x 'y))
(test (bounded-identifier (parseÎ» '((Î» f y)(Î» z z)))) (list 'f 'z))
(test (bounded-identifier (parseÎ» '(Î» x (Î» y (y x))))) (list 'y 'x))
(test (bounded-identifier (parseÎ» '(Î» x (Î» y z)))) (list 'y 'x))


;; generate-identifier : Î»-exp -> symbol
;; Purpose : To generate unpresented identifier.
(define (generate-identifier (le : Î»-exp)) : symbol
  (let ((generated-symbol 'gensym))
    (if (or (member generated-symbol (bounded-identifier le))
            (member generated-symbol (free-identifier le)))
        (begin
          (set! generated-symbol 
                (string->symbol 
                 (string-append (symbol->string generated-symbol) "*")))
          generated-symbol)
        generated-symbol)
    )
  )

;; Test:
(test (generate-identifier (parseÎ» '(Î» x (Î» y (Î» z x))))) 'gensym)
(test (generate-identifier (parseÎ» '(Î» x (Î» gensym (Î» z x))))) 'gensym*)
(test (generate-identifier (parseÎ» '(Î» x (Î» y (Î» z gensym))))) 'gensym*)

;; alpha-transformer : Î»-exp -> Î»-exp
;; Purpose : To apply alpha transformation on given Î»-expression
;; (Î» x M) --> (Î» y [M:x=y])
(define (alpha-transformer (s : symbol) (le : Î»-exp)) : Î»-exp
  (type-case Î»-exp le
    (Î»-sym (v) le)
    (Î»-app (l r) (Î»-app (alpha-transformer s l)
                        (alpha-transformer s r)))
    (Î»-def (v p) (Î»-def s (change-identifier s v p)))
    ))

;; Test:
(test (alpha-transformer 's (Î»-sym 'x)) (Î»-sym 'x))
(test (alpha-transformer 's (parseÎ» '(Î» x x))) (parseÎ» '(Î» s s)))
(test (alpha-transformer 's (parseÎ» '((Î» x x)(Î» x x)))) 
      (parseÎ» '((Î» s s)(Î» s s))))


;; substituter : Î»-exp  symbol  Î»-exp -> Î»-exp
;; Purpose : Substitution is the act of replacing a name 
;; - (in this case, that of the formal parameter) in an expression 
;; - (in this case, the body of the function) with another expression 
;; - (in this case, the actual parameter). [Directly from book.]
;; Template:
;; (define 
;; (substituter [what : Î»-exp] [for : symbol] [in : Î»-exp]) : Î»-exp  
;; <subst-body>
;;)
(define (substituter [what : Î»-exp] [for : symbol] [in : Î»-exp]) : Î»-exp 
  (type-case Î»-exp in
    (Î»-sym (v) (if (symbol=? v for)
                   what
                   in))
    (Î»-app (l r) (Î»-app (substituter what for l)
                        (substituter what for r)))
    (Î»-def (v p) (if (symbol=? v for)
                     in
                     (if (not (member v (free-identifier what)))
                         (Î»-def v (substituter what for p))
                         (if (member for (free-identifier p))
                             (substituter what for 
                                          (alpha-transformer
                                           (generate-identifier in) in))
                             in))))
    )
  )

;; beta-transformer : ((Î» x M) N) --> [M:x=N]
;; beta-transformer : Î»-exp -> Î»-exp
;; Purpose : Î»-calculus beta-reduction naive implementation.
;; Template :
;(define (beta-transform (le : Î»-exp)) : Î»-exp
;  (type-case Î»-exp le
;    (Î»-sym (v) ...)
;    (Î»-app (l r) ... l ... r)
;    (Î»-def (v p) ...v ...p)
;    ))

(define (beta-transformer (le : Î»-exp)) : Î»-exp
  (type-case Î»-exp le
    (Î»-sym (v) le)
    (Î»-app (l r) 
           (if (Î»-def? l)
               (beta-transformer
                (substituter r (Î»-def-v l) (Î»-def-p l)))
               (if (Î»-def? (beta-transformer l))
                   (beta-transformer 
                    (Î»-app (beta-transformer l) (beta-transformer r)))
                   (Î»-app (beta-transformer l) (beta-transformer r)))))
    (Î»-def (v p) (Î»-def v (beta-transformer p)))))

;------------------------------------------------------------------------------------------------------------


;; expt : number number -> number
;; Purpose: To calculate exponentiation of given two number, first number base and second is power.
(define (expt (a : number) (b : number)) : number
  (cond
    ((= b 0) 1)
    ((even? b) (sqr (expt a (/ b 2))))
    (else (* a (expt a (- b 1))))))

;; sqr : number -> number
;; Purpose: To calculate square of given number.
(define (sqr (a : number)) : number
  (* a a))

;; Pair is a well-known data structure in Lisp/Scheme family languages,
;; - since we do not have a data structure in plai-type, 
;; - this is an basic implementation of it.
(define-type pair
  (sym-op (sym : symbol)(op : (number number -> number))))

;; A table for operations, 
;; - by changing just this data structure,
;; - you can add any binary operations.

;; A list of pair(sym-op) as table of operations.
;; Handycap of this is, 
;; - it is complety depending on host language's operations.
(define ops
  (list
   (sym-op '+ +)
   (sym-op '* *)
   ;; Several binary operations added as it seen below
   (sym-op '- -)
   (sym-op '/ /)
   (sym-op '^ expt)
   (sym-op 'custom (Î» (x y) (+ (* 2 x) y)))
   ))

;; get-op : symbol -> ((number number) -> number)
;; Purpose : To obtain binary defined operation from operation definition table.
(define (get-op (sym : symbol)) : (number number -> number)
  (sym-op-op (assoc sym ops)))

;; assoc : symbol (listof pair) -> pair
;; Purpose : To associate given symbol with operation defined in a listof pairs.
(define (assoc (s : symbol) (lp : (listof pair))) : pair
  (let ((list-op (filter (lambda (x) (eq? s (sym-op-sym x))) lp)))
    (if (empty? list-op)
        (error 'assoc "Operation not defined")
        (first list-op))))


;; Binding is a data type to bind value with identifiers.
(define-type Binding
  [bind (name : symbol) (val : number)])

;; Just an alias to keep it clean, wrapper around listof Bindings.
(define-type-alias Environment (listof Binding))

;; Empty environment.
(define mt-env empty)

;; Extending environment a wrapper around cons.
(define extend-env cons)

;; Example Environment.
(define EnvNameSpace
  (list
   (bind 'x 5)
   (bind 'y 6)
   (bind 'z 7)
   ))

;; parseC : s-exp -> mslC
;; Purpose : To parseC given s-exp to abstract syntax mslC
;; Template : 
;(define (parseC [s : s-expression]) : mslC
;  (cond
;    [n ...]
;    [id ...]
;    any unary or binary function
;    ))

(define (parseC [s : s-expression]) : mslC
  (cond
    [(s-exp-number? s) (mslC-num (s-exp->number s))]
    [(s-exp-symbol? s) (mslC-id  (s-exp->symbol s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
          (cond
         [(= (length sl) 4)
          (if (symbol=? 'ifzero (s-exp->symbol (first sl)))
              (if-greater-than-zero (parseC (second sl))
                                    (parseC (third sl))
                                    (parseC (fourth sl)))
              (error 'parse "invalid expression as input"))]
         [(= (length sl) 3)
          (binaryOpC (s-exp->symbol (first sl)) 
                     (parseC (second sl)) (parseC (third sl)))]
         [(= (length sl) 2)
          (appC (s-exp->symbol (first sl)) (parseC (second sl)))]
         [else (error 'parse "invalid list input")])
       )]
    [else (error 'parse "invalid input")]))


;;test

(test (parseC (number->s-exp 5))(mslC-num 5))
(test (parseC (symbol->s-exp 'x))(mslC-id 'x))
(test (parseC '(ifzero 4 5 6))(if-greater-than-zero (mslC-num 4)(mslC-num 5)(mslC-num 6)))
(test (parseC '(ifzero 3 4 5))(if-greater-than-zero (mslC-num 3)(mslC-num 4)(mslC-num 5)))
(test (parseC '(ifzero 1 3 5))(if-greater-than-zero (mslC-num 1)(mslC-num 3)(mslC-num 5)))
(test (parseC '(ifzero 2 7 9))(if-greater-than-zero (mslC-num 2)(mslC-num 7)(mslC-num 9)))
(test (parseC '(ifzero 7 8 9))(if-greater-than-zero (mslC-num 7)(mslC-num 8)(mslC-num 9)))
(test (parseC '(ifzero 12 15 29))(if-greater-than-zero (mslC-num 12)(mslC-num 15)(mslC-num 29)))

;; Function Definition Structure
(define-type FunDefC
  [fdC (name : symbol) (arg : symbol) (body : mslC)])

; Example function definition namespace.
(define FuncDefNameSpace
  (list
   (fdC 'sqr 'x (parseC '(* x x)))
   (fdC 'sub1 'x (parseC '(+ x -1)))
   (fdC 'neg 'x (parseC '(* x -1)))
   (fdC 'double 'x (parseC '(+ x x)))
   (fdC 'quadruple 'x (parseC '(double (double x))))
   (fdC 'const5 '_ (parseC (number->s-exp 5)))
   (fdC 'factorial 'n (parseC 
                       '(ifzero n 1
                                (* n (factorial (sub1 n))))))
   (fdC 'fibonacci 'n (parseC 
                       '(ifzero n 1
                                (ifzero (- n 1) 1
                                        (ifzero (- n 2) 1
                                                (+ (fibonacci (- n 1))
                                                   (fibonacci (- n 2))
                                                   ))))))))

;; get-fundef : symbol (listof FunDefC) -> FunDefC
;; Purpose : To find given symbol's(function name/identifier) function definition
;; - from function definition namespace.
;; Template : Basic Structural Recursion
; (define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
;  (cond
;    [(empty? fds) ...]
;    [else ...(first fds) ...(get-fundef (rest fds))])

(define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
  (cond
    [(empty? fds) (error 'get-fundef "reference to undefined function")]
    [(cons? fds) (cond
                   [(equal? n (fdC-name (first fds))) (first fds)]
                   [else (get-fundef n (rest fds))])]))

;; Tests:
(test (get-fundef 'sub1 FuncDefNameSpace) 
      (fdC 'sub1 'x (parseC '(+ x -1))))
(test (get-fundef 'neg FuncDefNameSpace) 
      (fdC 'neg 'x (parseC '(* x -1))))
(test (get-fundef 'sqr FuncDefNameSpace) 
      (fdC 'sqr 'x (parseC '(* x x))))

;; lookup : symbol (listof Bindings) -> number
;; Purpose : To find given symbol's value
;; - from environment(listof bindings).
;; Template : Basic Structural Recursion
; (define (lookup [for : symbol] [env : Environment]) : number
;  (cond
;    [(empty? env) ...]
;    [else ...(first env) ...(lookup (rest env))])

(define (lookup [for : symbol] [env : Environment]) : number
  (cond
    [(empty? env) (error 'lookup "name not found")]
    [else (cond
            [(symbol=? for (bind-name (first env)))
             (bind-val (first env))]
            [else (lookup for (rest env))])]))

;; Tests:
(test (lookup 'x EnvNameSpace) 5)
(test (lookup 'y EnvNameSpace) 6)
(test (lookup 'z EnvNameSpace) 7)

;; interp : mslC (listof FunDefC) -> number
;; Purpose : To evaluate expressions to numbers.
;; Template :
; (define (interp [e : mslC] [fds : (listof FunDefC)]) : number
;  (type-case mslC in
;    [mslC-num (n) ...]
;    [mslC-id (s) ...]
;; if-greater-than-zero : mslC mslC mslC -> mslC
;; an f statement that controls if first argument is zero 
;; -- or not, if it is zero that returns second argunment,
;; --- otherwise third argument. Partially lazy.

(define (interpC [e : mslC] [env : Environment][fds : (listof FunDefC)]) : number
  (type-case mslC e
    [mslC-num (n) n]
    [mslC-id (s) (lookup s env)]
    [appC (f a) (local ([define fd (get-fundef f fds)])
                  (interpC (fdC-body fd)
                          (extend-env 
                           (bind (fdC-arg fd)(interpC a env fds))
                           mt-env)
                          fds))]
    [binaryOpC (op l r)((get-op op)
                        (interpC l env fds)
                        (interpC r env fds))]
    [if-greater-than-zero (pred t f)
                          (if (= 0 (interpC pred env fds))
                              (interpC t env fds)
                              (interpC f env fds))]
    ))

;test
(test (interpC (parseC '(+ 10 (const5 10)))
              mt-env
              FuncDefNameSpace) 15)
(test (interpC (parseC '(+ 10 (double (+ 1 2))))
              mt-env
              FuncDefNameSpace) 16)
(test (interpC (parseC '(+ 10 (quadruple (+ 1 2))))
              mt-env
              FuncDefNameSpace) 22)

;; eval : s-exp -> number
;; Purpose : A wrapper function to evaluate s-exp through our language.
(define (evalC (sexp : s-expression)) : number
  ;(interp (parse sexp) empty))
  (interpC (parseC sexp) mt-env FuncDefNameSpace))

(test (evalC '(+ 3 4)) 7)
(test (evalC '(* 3 4)) 12)
(test (evalC '(sqr 4)) 16)
(test (evalC '(neg 4)) -4)
(test (evalC '(/ 3 4)) (/ 3 4))
(test (evalC '(^ 3 4)) 81)
(test (evalC '(- 3 4)) -1)
(test (evalC '(custom 3 4)) 10)
(test (evalC '(factorial 0)) 1)
(test (evalC '(factorial 1)) 1)
(test (evalC '(factorial 5)) 120)
(test (evalC '(factorial 7)) 5040)
(test (evalC '(fibonacci 0)) 1)
(test (evalC '(fibonacci 1)) 1)
(test (evalC '(fibonacci 2)) 1)
(test (evalC '(fibonacci 3)) 2)
(test (evalC '(fibonacci 4)) 3)
(test (evalC '(fibonacci 5)) 5)
(test (evalC '(fibonacci 6)) 8)
(test (evalC '(fibonacci 7)) 13)
(test (evalC '(fibonacci 8)) 21)
(test (evalC '(fibonacci 9)) 34)

(test (beta-transformer (parseÎ» '((Î» x y) a)))(parseÎ» (symbol->s-exp 'y)))
(test (beta-transformer (parseÎ» '((Î» x (a b)) k)))(parseÎ» '(a b)))
(test (beta-transformer (parseÎ» '((Î» x (Î» x y)) k)))(parseÎ» '(Î» x y)))
(test (beta-transformer (parseÎ» '((Î» x (Î» y x)) k)))(parseÎ» '(Î» y k)))

